//基础搜索的内容bfs&dfs 题目为kuangbin系列1 https://vjudge.net/contest/173084#problem
//PS算法学起来真是累人。很多时候感觉还是单纯的写一点东西更叫人觉得开心，而不是为了AC。
//Problem A
//写下来感觉这题并很简单，但是当初的思考方向还是想的有些问题，VISIT标记是惯例，虽然在这题中我感觉如果按行dfs的话列可以不用visit统计。其余就是标记
//每列是否已经被棋子占了，以及在输入中判断位置是否为棋子位置。全当再回顾一遍dfs了，其实该尝试一遍stack实现的。
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
int qi[10][10],n,k,visit[10][10],ans=0,lie[10];    //用于标记列是否有棋子
char tempc;
void dfs(int deep,int num)
{
	if(num==0) {ans++;return ;}                      //dfs的图的边界
	if(deep>n) return ;
	for(int i=1;i<=n;i++)                            //对于每一行按列进行dfs即deep
	{
		if(qi[deep][i]==1&&visit[deep][i]!=1&&lie[i]!=1)     
		{
			visit[deep][i]=1;
			lie[i]=1;
			dfs(deep+1,num-1);
			visit[deep][i]=0;
			lie[i]=0;
		}
	}
	dfs(deep+1,num);
}
int main()
{
	while(scanf("%d%d",&n,&k))
	{
		if(n==-1&&k==-1) break;
		ans=0;
		memset(qi,0,sizeof(qi));
		memset(lie,0,sizeof(lie));
		for(int i=1;i<=n;i++) {for(int j=1;j<=n;j++)  {cin>>tempc;if(tempc=='#')qi[i][j]=1;visit[i][j]=0;}}
		dfs(1,k);
		cout<<ans<<endl;
	}
}
//Problem B
//很基础的一道迷宫题，与传统二维的就是多加了一个维度，而在使用bfs时就会要六个方向，用数组存在用循环入队列会方便很多。
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <queue>
#include <algorithm>
#include<cstdio>
using namespace std;
char map[35][35][35];
int vis[35][35][35];
int k,n,m,sx,sy,sz,ex,ey,ez;
int to[6][3] = {{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};           //六个方向的操作     
struct node
{
    int x,y,z,step;
}a,next;                                                    //用于进行bfs的队列单元
int check(int x,int y,int z)                                //判断是否超界，是否已经访问过，是否为障碍物，即入队的条件
{
    if(x<0||y<0||z<0||x>=k||y>=n||z>=m)
        return 1;
    else if(map[x][y][z] == '#')
        return 1;
    else if(vis[x][y][z])
        return 1;
    return 0;
}
int bfs()
{
    int i;
    queue<node>Q;
    a.x=sx,a.y=sy,a.z=sz;
    a.step=0;
    vis[sx][sy][sz]=1;
    Q.push(a);
    while(!Q.empty())                                                                            //起点入队，然后不断取头节点，判断六个方向再分别入队即可
    {
        a=Q.front();
        Q.pop();
        if(a.x==ex&&a.y==ey&&a.z ==ez) return a.step;                                                   
        for(i=0;i<6;i++)
        {
            next=a;
            next.x=a.x+to[i][0];
            next.y=a.y+to[i][1];
            next.z=a.z+to[i][2];
            if(check(next.x,next.y,next.z)) continue;
            vis[next.x][next.y][next.z]=1;
            next.step=a.step+1;
            Q.push(next);
        }
    }
    return 0;
}
int main()
{
    int i,j,r,ans;
    while(scanf("%d%d%d",&k,&n,&m),n+m+k)
    {
        for(i = 0; i<k; i++)
        {
            for(j = 0; j<n; j++)
            {
                scanf("%s",map[i][j]);
                for(r = 0; r<m; r++) if(map[i][j][r] == 'S') sx=i,sy=j,sz=r; else if(map[i][j][r] == 'E') ex=i,ey=j,ez=r;
            }
        }
        memset(vis,0,sizeof(vis));
        ans = bfs();
        if(ans) printf("Escaped in %d minute(s).\n",ans);else printf("Trapped!\n");
    }
 	return 0;
}
//Problem C
//这么简单的一道bfs题狂错，蜜汁runtime error不知道是不是因为队列爆了，感觉和其他别人AC的代码差别不大。
//之后终于弄明白了，原来是对于下界考虑错了，导致0这个点会无限入栈最后导致STACK爆了，以后处理类似问题的时候看到runtime error应该考虑是否是因为无边界
//即认为必能找出结果时可能会出现爆栈的情况。
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
using namespace std;
int a,b,visit[999999],n,s;
struct node{
	int num,step;
}ori,temp,temp2;
queue<node>q;
int bfs()
{
	while(!q.empty()) q.pop();
	ori.num=a,ori.step=0;
	q.push(ori);
	while(!q.empty())
	{
		temp=q.front();
		q.pop();
		n=temp.num;s=temp.step;visit[n]=1;
		if(n==b) return s;
		if(n<100000) {temp2.num=n+1,temp2.step=s+1;if(!visit[temp2.num]) q.push(temp2);}
		if(n>=1) {temp2.num=n-1,temp2.step=s+1;if(!visit[temp2.num]) q.push(temp2);}
		if(n<100000) {temp2.num=n*2,temp2.step=s+1;if(!visit[temp2.num]) q.push(temp2);}
	}
} 
int main()
{
	while(~scanf("%d%d",&a,&b))
	{
		memset(visit,0,sizeof(visit));
		printf("%d\n",bfs());
	}
}
Problem E
//因为对于二进制爆搜实在无感，就先把D题跳过了，这道题感觉是一道very_easy的搜索题，只要注意数据的大小，选用unsigned long long即可。不过给的sample有点
//坑，还以为有啥特殊要求。原来时他的答案太大了，直接搜就okay了。
#include<iostream>
#include<cstdio>
#include<queue>
using namespace std;
unsigned long long n,temp1,temp2,temp3,temp;
queue<unsigned long long>q;
unsigned long long bfs()
{
	while(!q.empty()) q.pop();
	q.push(1);
	while(!q.empty())
	{
		temp=q.front();
		q.pop();
		if(temp%n==0) return temp;
		temp1=temp*10+1;
		temp2=temp*10;
		q.push(temp1);
		q.push(temp2);
	}
}
int main()
{
	while(scanf("%llu",&n)&&n)
	{
		temp3=bfs();
		printf("%llu\n",temp3);
	}
}
Problem F
//有一个问题即在广搜当中如何把搜索过的路径都存储起来！看一下pot那道题如何解决的。 
//基本思路对，但是细节应该有些地方错了。 
//在我这里实际上如果想要把他存起来就需要一个上界，即可能搜索的点的上界，也就是visit，再用一个变量cnt为其在数组中分配内存。 
//又是因为一个小错误纠结了好久，写的时候还是要仔细仔细再仔细。白白浪费了很多的时间。 
//每次检验是否为素数肯定是会超时的啊，这都想不到吗！！！！！于是选择去打一个哈希表去处理。还是没有养成估计时间复杂度的习惯，这很不好。 
#include<iostream>
#include<queue>
#include<cstdio>
#include<cmath>
#include<stack>
#include<cstring>
using namespace std;
struct node{
	int num,steps;
}ori,temp,ans,temp1;
queue<node>q;
int m,n1,n2,visit[10009],n,s,w[5],temp2,prime[10009];
bool check(int n)
{
	for(int i=2;i<=sqrt(n);i++) if(n%i==0) return false;
	return true;
}
void ini()
{
	for(int i=2;i<=10000;i++)
	if(check(i)) prime[i]=1;else prime[i]=0;
}
int bfs()
{
	while(!q.empty()) q.pop();
	ori.num=n1,ori.steps=0;
	q.push(ori);
	while(!q.empty())
	{
		temp1=q.front();
		q.pop();
		n=temp1.num,s=temp1.steps,visit[temp1.num]=1;
		visit[n]=1;
		if(n==n2) return s;
		w[4]=n%10;                                               //求四位的具体数值 
		w[3]=(n/10)%10;
		w[2]=(n/100)%10;
		w[1]=n/1000;
		for(int i=0;i<=9;i++)                                      //按位变+判断 
		{
			if(i!=0) 
			{
				temp2=n-w[1]*1000+i*1000;
				if(prime[temp2]==1&&visit[temp2]==0) {temp.num=temp2,temp.steps=s+1,q.push(temp);}
			}
			temp2=n-w[2]*100+i*100;
			if(prime[temp2]==1&&visit[temp2]==0) {temp.num=temp2,temp.steps=s+1,q.push(temp);}
			temp2=n-w[3]*10+i*10;
			if(prime[temp2]==1&&visit[temp2]==0) {temp.num=temp2,temp.steps=s+1,q.push(temp);}
			temp2=n-w[4]+i;
			if(prime[temp2]==1&&visit[temp2]==0) {temp.num=temp2,temp.steps=s+1,q.push(temp);}
		}
	}
}
int main()
{
	cin>>m; 
	while(m--)
	{
		memset(visit,0,sizeof(visit));
		ini();
		cin>>n1>>n2;
		cout<<bfs()<<endl;
	}
}
Problem H
//这题险些不想继续改了，其实就是一个很小的错误，对于IMPOSSIBLE那个情况处理有点问题。总的来说感觉这道题还是一道特别水的题，迷迷糊糊写下来也A掉了，感觉
//这道题我提高的部分在于用储存节点，再通过前驱把节点找出来，然后建一个STACK再把他们输出出来就解决了。就思想上而言这题有新的东西。
#include<iostream>
#include<queue>
#include<cstring>
#include<stack>
using namespace std;
struct node{
	int na,nb,steps,op,former,it;
}p[109*109],temp,ans;
int visit[109][109],a,b,c,cnt=0,temp_a,temp_b,s,aij,aji,bij,bji,tt;
queue<node>q;
stack<int>ss;
void print_res(node ans)
{
	int k=ans.it;
	while(!ss.empty()) ss.pop();
	while(k!=-1)
	{
		ss.push((p[k].op));
		k=p[k].former;
	}
	while(!ss.empty())
	{
		tt=ss.top();
		if(tt==1) cout<<"FILL(2)"<<endl;
		else if(tt==2) cout<<"FILL(1)"<<endl;
		else if(tt==3) cout<<"DROP(2)"<<endl;
		else if(tt==4) cout<<"DROP(1)"<<endl;
		else if(tt==5) cout<<"POUR(1,2)"<<endl;
		else if(tt==6) cout<<"POUR(2,1)"<<endl;
		ss.pop();
	} 
}
node bfs()
{
	while(!q.empty()) q.pop();
	p[cnt].na=0,p[cnt].nb=0,p[cnt].steps=0,p[cnt].former=-1,p[cnt].op=-1,p[cnt].it=cnt;cnt++;q.push(p[0]);
	while(!q.empty())
	{
		temp=q.front();temp_a=temp.na,temp_b=temp.nb,s=temp.steps;visit[temp_a][temp_b]=1;q.pop();
		if(temp_a==c||temp_b==c) return temp;
		if(!visit[temp_a][b]) 
		{
			p[cnt].na=temp_a,p[cnt].nb=b,p[cnt].steps=s+1,p[cnt].former=temp.it,p[cnt].it=cnt,p[cnt].op=1;     //第一种操作，将B中的水填满 
			q.push(p[cnt]);
			cnt++;
		}
		if(!visit[a][temp_b]) 
		{
			p[cnt].na=a,p[cnt].nb=temp_b,p[cnt].steps=s+1,p[cnt].former=temp.it,p[cnt].it=cnt,p[cnt].op=2;     //第二种操作，将A中的水填满 
			q.push(p[cnt]);
			cnt++;
		}
		if(!visit[temp_a][0])
		{
			p[cnt].na=temp_a,p[cnt].nb=0,p[cnt].steps=s+1,p[cnt].former=temp.it,p[cnt].it=cnt,p[cnt].op=3;     //第三种操作，将B中的水全部倒掉 
			q.push(p[cnt]);
			cnt++;
		}
		if(!visit[0][temp_b])
		{
			p[cnt].na=0,p[cnt].nb=temp_b,p[cnt].steps=s+1,p[cnt].former=temp.it,p[cnt].it=cnt,p[cnt].op=4;     //第四种操作，将A中的水全部倒掉 
			q.push(p[cnt]);
			cnt++;
		}
		if(temp_a+temp_b<=b) bij=temp_a+temp_b,aij=0;
		else bij=b,aij=temp_a+temp_b-b;
		if(temp_a+temp_b<=a) aji=temp_a+temp_b,bji=0;
		else aji=a,bji=temp_a+temp_b-a;
		if(!visit[aij][bij])
		{
			p[cnt].na=aij,p[cnt].nb=bij,p[cnt].steps=s+1,p[cnt].former=temp.it,p[cnt].it=cnt,p[cnt].op=5;       //第五种操作，将B中的水全部倒到A中去，即j倒到i里去 
			q.push(p[cnt]);
			cnt++;
		}
		if(!visit[aji][bji])
		{
			p[cnt].na=aji,p[cnt].nb=bji,p[cnt].steps=s+1,p[cnt].former=temp.it,p[cnt].it=cnt,p[cnt].op=6;       //第六种操作，将A中的水全部倒到B中去，即i倒到j里去 
			q.push(p[cnt]);
			cnt++;
		} 
	}
	return p[0];
}
int main()
{
	while(cin>>a>>b>>c)
	{
		memset(visit,0,sizeof(visit));
		ans=bfs();
		if(ans.former==-1) cout<<"impossible"<<endl;
		else
		{
			cout<<ans.steps<<endl;
			print_res(ans);
		}
	}
	return 0;
}


