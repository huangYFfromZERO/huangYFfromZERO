from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import gzip
import os
import tempfile
import numpy
from six.moves import urllib
from six.moves import xrange  # pylint: disable=redefined-builtin
import tensorflow as tf
from tensorflow.contrib.learn.python.learn.datasets.mnist import read_data_sets
from tensorflow.examples.tutorials.mnist import input_data
from tensorflow.examples.tutorials import mnist
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)                         #前面部分用于MNIST加载train数据以及test数据
temp = tf.placeholder(tf.float32, [None, 784])
weight = tf.Variable(tf.zeros([784, 10]))
bias = tf.Variable(tf.zeros([10]))
y = tf.nn.softmax(tf.matmul(temp, weight) + bias)
y_ = tf.placeholder(tf.float32,[None, 10])
cross_entrophy = -tf.reduce_sum(y_*tf.log(y))
train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entrophy)
init_op = tf.global_variables_initializer()
with tf.Session() as sess:
    sess.run(init_op)
    for i in range(1000):
        batch_xs, batch_ys = mnist.train.next_batch(100)
        sess.run(train_step, feed_dict={temp: batch_xs, y_: batch_ys})
    correct = tf.equal(tf.argmax(y, 1),tf.argmax(y_, 1) )
    acc = tf.reduce_mean(tf.cast(correct, "float"))
    print(sess.run(acc, feed_dict={temp: mnist.test.images, y_: mnist.test.labels}))
